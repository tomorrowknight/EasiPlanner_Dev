{
    "project": {
        "name": "Documenting JavaScript with YUIDoc",
        "description": "EasiPlanner core logic Documentation",
        "version": "1.0.0",
        "url": "http://dev.logistics.lol"
    },
    "files": {
        "algo.js": {
            "name": "algo.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "index.js": {
            "name": "index.js",
            "modules": {
                "Backbone": 1
            },
            "classes": {
                "initialize": 1
            },
            "fors": {
                "index.js": 1
            },
            "namespaces": {}
        },
        "models.js": {
            "name": "models.js",
            "modules": {},
            "classes": {
                "Supermodel": 1,
                "Collection": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "near.js": {
            "name": "near.js",
            "modules": {},
            "classes": {
                "near": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tsptw.js": {
            "name": "tsptw.js",
            "modules": {},
            "classes": {
                "tsptw": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "Backbone": {
            "name": "Backbone",
            "submodules": {},
            "elements": {},
            "classes": {
                "near": 1,
                "initialize": 1,
                "index.js": 1,
                "Supermodel": 1,
                "Collection": 1,
                "tsptw": 1
            },
            "fors": {
                "index.js": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "tsptw.js",
            "line": 145,
            "description": "This is the Backbone.js based module"
        }
    },
    "classes": {
        "near": {
            "name": "near",
            "shortname": "near",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Backbone",
            "file": "near.js",
            "line": 1,
            "description": "This the class for the core algorithm of the application",
            "static": 1,
            "params": [
                {
                    "name": "depot",
                    "description": "the depot or start location",
                    "type": "Depot"
                },
                {
                    "name": "parcels",
                    "description": "the parcel and the information associated with it",
                    "type": "Parcel[]"
                },
                {
                    "name": "vehicles",
                    "description": "(Vehicle[]) the vecicles that will be used to form the routes"
                }
            ],
            "return": {
                "description": "routes (String) returns the route of the vehicle"
            }
        },
        "initialize": {
            "name": "initialize",
            "shortname": "initialize",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Backbone",
            "namespace": "",
            "file": "index.js",
            "line": 21,
            "description": "This method initializes the map and sets the map",
            "static": 1
        },
        "index.js": {
            "name": "index.js",
            "shortname": "index.js",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Backbone",
            "namespace": ""
        },
        "Supermodel": {
            "name": "Supermodel",
            "shortname": "Supermodel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Backbone",
            "namespace": "",
            "file": "models.js",
            "line": 129,
            "description": "This the Super class for the Model required for establishing parcels on a map",
            "static": 1
        },
        "Collection": {
            "name": "Collection",
            "shortname": "Collection",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Backbone",
            "namespace": "",
            "file": "models.js",
            "line": 93,
            "description": "This is a backbone class for extending the search",
            "is_constructor": 1
        },
        "tsptw": {
            "name": "tsptw",
            "shortname": "tsptw",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Backbone",
            "namespace": "",
            "file": "tsptw.js",
            "line": 145,
            "description": "This the class for the core algorithm of the application",
            "static": 1,
            "params": [
                {
                    "name": "routes",
                    "description": "prints the route for each parcel",
                    "type": "Parcel[]"
                }
            ],
            "return": {
                "description": "routes (String) returns the route of the vehicle"
            }
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "index.js",
            "line": 90,
            "description": "This is executed when you select the parcels on the map",
            "itemtype": "method",
            "name": "onSelect",
            "class": "index.js",
            "module": "Backbone"
        },
        {
            "file": "index.js",
            "line": 105,
            "description": "This is executed when you select the parcels on the map",
            "itemtype": "method",
            "name": "setStatus",
            "params": [
                {
                    "name": "status",
                    "description": "the delivery status of the parcel",
                    "type": "String"
                }
            ],
            "class": "index.js",
            "module": "Backbone"
        },
        {
            "file": "index.js",
            "line": 114,
            "description": "the method to execute the planned routes with spinner.js to show loading",
            "itemtype": "method",
            "name": "planRoutes",
            "class": "index.js",
            "module": "Backbone"
        },
        {
            "file": "index.js",
            "line": 129,
            "description": "the method to plan routes",
            "itemtype": "method",
            "name": "planRoute",
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle used in planning the route",
                    "type": "Vehicle"
                }
            ],
            "class": "index.js",
            "module": "Backbone"
        },
        {
            "file": "index.js",
            "line": 147,
            "description": "the method to execute the clustered route result",
            "itemtype": "method",
            "name": "planClusterRoutes",
            "class": "index.js",
            "module": "Backbone"
        },
        {
            "file": "index.js",
            "line": 170,
            "description": "the method to calculate the routes based on the input args",
            "itemtype": "method",
            "name": "calRoute",
            "params": [
                {
                    "name": "profile",
                    "description": "the profile information of the user",
                    "type": "Profile"
                },
                {
                    "name": "planedParcels",
                    "description": "The parcels that have been planned",
                    "type": "Parcel"
                },
                {
                    "name": "vehicles",
                    "description": "the vehicles for the user",
                    "type": "Vehicle"
                },
                {
                    "name": "anchor",
                    "description": "The depot location",
                    "type": "Location"
                },
                {
                    "name": "callback",
                    "description": "(Function)  this is a callback function"
                }
            ],
            "return": {
                "description": "the callback event of the calculated route",
                "type": "Function"
            },
            "class": "index.js",
            "module": "Backbone"
        },
        {
            "file": "index.js",
            "line": 199,
            "description": "the method to log the time",
            "itemtype": "method",
            "name": "log",
            "params": [
                {
                    "name": "msg",
                    "description": "the string message",
                    "type": "String"
                }
            ],
            "class": "index.js",
            "module": "Backbone"
        },
        {
            "file": "index.js",
            "line": 208,
            "description": "the method to provide the time",
            "itemtype": "method",
            "name": "time",
            "class": "index.js",
            "module": "Backbone"
        },
        {
            "file": "index.js",
            "line": 216,
            "description": "the method to autofill the parcels with the vehicles",
            "itemtype": "method",
            "name": "autoFill",
            "class": "index.js",
            "module": "Backbone"
        },
        {
            "file": "index.js",
            "line": 230,
            "description": "the method to plot the routes",
            "itemtype": "method",
            "name": "plotRoute",
            "params": [
                {
                    "name": "route",
                    "description": "the route formed by the algorithm",
                    "type": "Route"
                }
            ],
            "class": "index.js",
            "module": "Backbone"
        },
        {
            "file": "index.js",
            "line": 253,
            "description": "the method to save the routes",
            "itemtype": "method",
            "name": "saveRoute",
            "params": [
                {
                    "name": "route",
                    "description": "the route formed by the algorithm",
                    "type": "Route"
                }
            ],
            "class": "index.js",
            "module": "Backbone"
        },
        {
            "file": "index.js",
            "line": 266,
            "description": "the method to remove all the routes",
            "itemtype": "method",
            "name": "clearAll",
            "class": "index.js",
            "module": "Backbone"
        },
        {
            "file": "index.js",
            "line": 278,
            "description": "the method to hide all the route layers",
            "itemtype": "method",
            "name": "hide",
            "class": "index.js",
            "module": "Backbone"
        },
        {
            "file": "index.js",
            "line": 287,
            "description": "the method to flter all the parcels by vehicle or time windows",
            "itemtype": "method",
            "name": "onFilterParcels",
            "class": "index.js",
            "module": "Backbone"
        },
        {
            "file": "index.js",
            "line": 298,
            "description": "the method to filter based on horizon change",
            "itemtype": "method",
            "name": "onHorizonChanged",
            "class": "index.js",
            "module": "Backbone"
        },
        {
            "file": "index.js",
            "line": 320,
            "description": "the method to create the parcel markers",
            "itemtype": "method",
            "name": "createParcelMarker",
            "params": [
                {
                    "name": "parcel",
                    "description": "parcels that exist",
                    "type": "Parcel"
                }
            ],
            "class": "index.js",
            "module": "Backbone"
        },
        {
            "file": "index.js",
            "line": 360,
            "description": "the method to geocode the parcels",
            "itemtype": "method",
            "name": "geocodeParcel",
            "return": {
                "description": "returns the geocoded parcel",
                "type": "Parcel"
            },
            "class": "index.js",
            "module": "Backbone"
        },
        {
            "file": "index.js",
            "line": 422,
            "description": "the method create the initial map overlay of parcels updates the selection of parcels",
            "itemtype": "method",
            "name": "callback",
            "return": {
                "description": "returns true on the success of an updated parcel",
                "type": "Boolean"
            },
            "class": "index.js",
            "module": "Backbone"
        },
        {
            "file": "models.js",
            "line": 13,
            "description": "This model for setting the parcels on the map",
            "itemtype": "method",
            "name": "urlRoot",
            "return": {
                "description": "url  returns the url of the model",
                "type": "String"
            },
            "class": "Supermodel",
            "module": "Backbone"
        },
        {
            "file": "models.js",
            "line": 23,
            "description": "This function initializes the parcels on the map",
            "itemtype": "method",
            "name": "initialize",
            "class": "Supermodel",
            "module": "Backbone"
        },
        {
            "file": "models.js",
            "line": 32,
            "description": "This function creates the markers on the map",
            "itemtype": "method",
            "name": "createMarker",
            "class": "Supermodel",
            "module": "Backbone"
        },
        {
            "file": "models.js",
            "line": 46,
            "description": "This function gets the icons for the map",
            "itemtype": "method",
            "name": "getIcon",
            "return": {
                "description": "url  the icon url",
                "type": "String"
            },
            "class": "Supermodel",
            "module": "Backbone"
        },
        {
            "file": "models.js",
            "line": 54,
            "description": "This function gets the url for the icons for the map",
            "itemtype": "method",
            "name": "getIconUrl",
            "return": {
                "description": "url  returns the icon url",
                "type": "String"
            },
            "class": "Supermodel",
            "module": "Backbone"
        },
        {
            "file": "models.js",
            "line": 62,
            "description": "This function gets the coordinates to place the marker on the map",
            "itemtype": "method",
            "name": "Position",
            "return": {
                "description": "latlng  this returns a geocoded marker",
                "type": "LatLng"
            },
            "class": "Supermodel",
            "module": "Backbone"
        },
        {
            "file": "models.js",
            "line": 70,
            "description": "This function gets the distance from one marker to another marker",
            "itemtype": "method",
            "name": "distance",
            "params": [
                {
                    "name": "model",
                    "description": "the model used to set the distance",
                    "type": "SuperModel.model"
                }
            ],
            "return": {
                "description": "distanceBetween (double) returns the distance between two markers"
            },
            "class": "Supermodel",
            "module": "Backbone"
        },
        {
            "file": "models.js",
            "line": 80,
            "description": "This function gets the travel time of the model",
            "itemtype": "method",
            "name": "travelTime",
            "params": [
                {
                    "name": "model",
                    "description": "the model used to set the time",
                    "type": "SuperModel.model"
                }
            ],
            "class": "Supermodel",
            "module": "Backbone"
        },
        {
            "file": "models.js",
            "line": 106,
            "description": "This function gets the search for the model",
            "itemtype": "method",
            "name": "triggerEach",
            "params": [
                {
                    "name": "model",
                    "description": "the model used to set the time",
                    "type": "SuperModel.model"
                }
            ],
            "class": "Collection",
            "module": "Backbone"
        },
        {
            "file": "models.js",
            "line": 114,
            "description": "This function gets the search for the model which are not empty",
            "itemtype": "method",
            "name": "triggerEach",
            "params": [
                {
                    "name": "model",
                    "description": "the model used to set the time",
                    "type": "SuperModel.model"
                }
            ],
            "return": {
                "description": "parcel.marker  returns the non empty parcel marker",
                "type": "Parcel"
            },
            "class": "Collection",
            "module": "Backbone"
        },
        {
            "file": "models.js",
            "line": 146,
            "description": "This function gets the colour of the vehicle marker based on the hex",
            "itemtype": "method",
            "name": "getColor",
            "return": {
                "description": "color  this returns a colour",
                "type": "HexColor"
            },
            "class": "Supermodel",
            "module": "Backbone"
        },
        {
            "file": "models.js",
            "line": 154,
            "description": "This function gets the inverted colour of the vehicle marker based on the hex",
            "itemtype": "method",
            "name": "getInvertColor",
            "return": {
                "description": "color  this returns an Inverted colour",
                "type": "HexInvertColor"
            },
            "class": "Supermodel",
            "module": "Backbone"
        },
        {
            "file": "models.js",
            "line": 162,
            "description": "This function gets marker icon url based on the hex",
            "itemtype": "method",
            "name": "getIcon",
            "return": {
                "description": "iconUrl  this returns the marker icon url",
                "type": "String"
            },
            "class": "Supermodel",
            "module": "Backbone"
        },
        {
            "file": "models.js",
            "line": 186,
            "description": "This function gets the window start date",
            "itemtype": "method",
            "name": "getWindowStart",
            "return": {
                "description": "startDate  this returns the window start date (not time)",
                "type": "Date"
            },
            "class": "Supermodel",
            "module": "Backbone"
        },
        {
            "file": "models.js",
            "line": 195,
            "description": "This function gets the window end date",
            "itemtype": "method",
            "name": "getWindowEnd",
            "return": {
                "description": "endDate  this returns the window end date (not time)",
                "type": "Date"
            },
            "class": "Supermodel",
            "module": "Backbone"
        },
        {
            "file": "models.js",
            "line": 204,
            "description": "This function gets the window end time",
            "itemtype": "method",
            "name": "getWindowStart",
            "return": {
                "description": "startTime  this returns the window start time",
                "type": "Time"
            },
            "class": "Supermodel",
            "module": "Backbone"
        },
        {
            "file": "models.js",
            "line": 212,
            "description": "This function gets the window end time",
            "itemtype": "method",
            "name": "getWindowEnd",
            "return": {
                "description": "endTime  this returns the window end time",
                "type": "Time"
            },
            "class": "Supermodel",
            "module": "Backbone"
        },
        {
            "file": "models.js",
            "line": 220,
            "description": "This function gets the latest possible start time for the delivery",
            "itemtype": "method",
            "name": "getLatestStartTime",
            "return": {
                "description": "latestStartTime  this returns the latest possible start time for the delivery",
                "type": "Time"
            },
            "class": "Supermodel",
            "module": "Backbone"
        },
        {
            "file": "models.js",
            "line": 228,
            "description": "This function gets the latest possible end time for the delivery",
            "itemtype": "method",
            "name": "getLatestEndTime",
            "return": {
                "description": "latestEndTime  this returns the latest possible end time for the delivery",
                "type": "Time"
            },
            "class": "Supermodel",
            "module": "Backbone"
        },
        {
            "file": "models.js",
            "line": 237,
            "description": "This function filters based on the start and end datetime",
            "itemtype": "method",
            "name": "onFilter",
            "class": "Supermodel",
            "module": "Backbone"
        },
        {
            "file": "models.js",
            "line": 255,
            "description": "This function sets the area bounds and the markers within",
            "itemtype": "method",
            "name": "onFilter",
            "class": "Supermodel",
            "module": "Backbone"
        },
        {
            "file": "models.js",
            "line": 266,
            "description": "This function sets the area bounds and the markers within",
            "itemtype": "method",
            "name": "fitTo",
            "params": [
                {
                    "name": "vehicle",
                    "description": "uses the vehicle class to get types",
                    "type": "Vehicle"
                }
            ],
            "return": {
                "description": "true  returns true if the vehicle type exists",
                "type": "Boolean"
            },
            "class": "Supermodel",
            "module": "Backbone"
        },
        {
            "file": "models.js",
            "line": 286,
            "description": "This function sets the area bounds and the markers within",
            "itemtype": "method",
            "name": "model",
            "params": [
                {
                    "name": "attrs",
                    "description": "The attribute of the parcel"
                },
                {
                    "name": "options",
                    "description": "options for the parcel"
                }
            ],
            "return": {
                "description": "true  returns true if the vehicle type exists",
                "type": "Boolean"
            },
            "class": "Supermodel",
            "module": "Backbone"
        },
        {
            "file": "models.js",
            "line": 297,
            "description": "This function gets the parcels selected in the area",
            "itemtype": "method",
            "name": "getSelectedParcels",
            "params": [
                {
                    "name": "parcel",
                    "description": "uses the vehicle class to get types",
                    "type": "Parcel"
                }
            ],
            "return": {
                "description": "true  returns true parcels are selected",
                "type": "Boolean"
            },
            "class": "Supermodel",
            "module": "Backbone"
        },
        {
            "file": "models.js",
            "line": 310,
            "description": "This function gets the parcels selected by volume",
            "itemtype": "method",
            "name": "getSelectedTotalVolume",
            "return": {
                "description": "true  returns true if parcels are selected",
                "type": "Boolean"
            },
            "class": "Supermodel",
            "module": "Backbone"
        },
        {
            "file": "models.js",
            "line": 320,
            "description": "This function gets the parcels selected by weight",
            "itemtype": "method",
            "name": "getSelectedTotalWeight",
            "return": {
                "description": "true  returns  iftrue parcels are selected",
                "type": "Boolean"
            },
            "class": "Supermodel",
            "module": "Backbone"
        },
        {
            "file": "models.js",
            "line": 330,
            "description": "This function gets the parcels that are unassigned",
            "itemtype": "method",
            "name": "getIdleParcels",
            "return": {
                "description": "true  returns  iftrue parcels are selected",
                "type": "Boolean"
            },
            "class": "Supermodel",
            "module": "Backbone"
        },
        {
            "file": "models.js",
            "line": 341,
            "description": "This function sets the area bounds and the markers within",
            "itemtype": "method",
            "name": "getPosition",
            "return": {
                "description": "latlng  returns the coordinates of the driver",
                "type": "LatLng"
            },
            "class": "Supermodel",
            "module": "Backbone"
        },
        {
            "file": "models.js",
            "line": 353,
            "description": "This function gets the capacity Volume left",
            "itemtype": "method",
            "name": "getCapacityVolumeLeft",
            "return": {
                "description": "true  returns the parcel with the volume left",
                "type": "Parcel"
            },
            "class": "Supermodel",
            "module": "Backbone"
        },
        {
            "file": "models.js",
            "line": 366,
            "description": "This function gets the capacity Weight left",
            "itemtype": "method",
            "name": "getCapacityWeightLeft",
            "return": {
                "description": "memo + parcel  returns the parcel with the weight left",
                "type": "Parcel"
            },
            "class": "Supermodel",
            "module": "Backbone"
        },
        {
            "file": "models.js",
            "line": 379,
            "description": "This function gets the capacity Weight left",
            "itemtype": "method",
            "name": "getColor",
            "return": {
                "description": "hexColor returns the hexColor of the vehicle",
                "type": "String"
            },
            "class": "Supermodel",
            "module": "Backbone"
        },
        {
            "file": "near.js",
            "line": 94,
            "description": "This the method to get the centroid of the depot and parcels and reference parcel",
            "itemtype": "method",
            "name": "getCentre",
            "params": [
                {
                    "name": "ps",
                    "description": "parcels at the depot",
                    "type": "Parcel[]"
                },
                {
                    "name": "depotParcel",
                    "description": "the parcels at the depot or start location",
                    "type": "Parcel"
                },
                {
                    "name": "parcels",
                    "description": "the parcel and the information associated with it",
                    "type": "Parcel[]"
                }
            ],
            "return": {
                "description": "center (String) returns the centre coordinates of the routes based on the depot"
            },
            "class": "near",
            "module": "Backbone"
        },
        {
            "file": "near.js",
            "line": 143,
            "description": "This the class for the core algorithm of the application",
            "itemtype": "method",
            "name": "createDepotParcel",
            "params": [
                {
                    "name": "depot",
                    "description": "the location of the depot",
                    "type": "Location"
                }
            ],
            "return": {
                "description": "returns a generic parcel Object",
                "type": "Parcel"
            },
            "class": "tsptw",
            "module": "Backbone"
        },
        {
            "file": "tsptw.js",
            "line": 113,
            "description": "This the method to get the centroid of the depot and parcels and reference parcel",
            "itemtype": "method",
            "name": "getCentre",
            "params": [
                {
                    "name": "ps",
                    "description": "parcels at the depot",
                    "type": "Parcel[]"
                },
                {
                    "name": "depotParcel",
                    "description": "the parcels at the depot or start location",
                    "type": "Parcel"
                },
                {
                    "name": "parcels",
                    "description": "the parcel and the information associated with it",
                    "type": "Parcel[]"
                }
            ],
            "return": {
                "description": "center (String) returns the centre coordinates of the routes based on the depot"
            },
            "class": "tsptw",
            "module": "Backbone"
        },
        {
            "file": "tsptw.js",
            "line": 162,
            "description": "This the class for the core algorithm of the application",
            "itemtype": "method",
            "name": "calIndexsBySavings",
            "params": [
                {
                    "name": "parcel",
                    "description": "the parcel to compare the time saving to",
                    "type": "Parcel"
                },
                {
                    "name": "ps",
                    "description": "prints the route for each parcel",
                    "type": "Parcel[]"
                }
            ],
            "return": {
                "description": "the index of the pair of parcels which results in a saving",
                "type": "Number"
            },
            "class": "tsptw",
            "module": "Backbone"
        },
        {
            "file": "tsptw.js",
            "line": 184,
            "description": "This the class for the core algorithm of the application",
            "itemtype": "method",
            "name": "insertParcel",
            "params": [
                {
                    "name": "ps_clone",
                    "description": "creates a clone array for the ps",
                    "type": "Parcel[]"
                },
                {
                    "name": "index",
                    "description": "the index of each savingPair",
                    "type": "Number"
                },
                {
                    "name": "parcel",
                    "description": "the parcel to compare with",
                    "type": "Parcel"
                }
            ],
            "return": {
                "description": "returns true if a parcel can be inserted into the route",
                "type": "Boolean"
            },
            "class": "tsptw",
            "module": "Backbone"
        },
        {
            "file": "tsptw.js",
            "line": 206,
            "description": "This the class for the core algorithm of the application",
            "itemtype": "method",
            "name": "createDepotParcel",
            "params": [
                {
                    "name": "depot",
                    "description": "the location of the depot",
                    "type": "Location"
                }
            ],
            "return": {
                "description": "returns a generic parcel Object",
                "type": "Parcel"
            },
            "class": "tsptw",
            "module": "Backbone"
        }
    ],
    "warnings": []
}